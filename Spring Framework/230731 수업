-- 정리 --
Spring : 자바 라이브러리
  DI : Spring을 통해서 객체 생성 ~ 객체 소멸
                    -------- : 필요한 데이터가 있는 경우에 데이터를 전송(멤버변수의 초기화)
                    변수의 초기화 
                    1) 명시적 초기화 : 클래스 제작 시 변수에 직접 값을 채우는 방식
                      public class A {
                          private String name="홍길동";
                      } 
                    2) 생성자 이용 => 생성자 DI
                    3) setter를 이용 => setter DI
      → xml, 자바 이용
    AOP : 프로그램은 핵심 코드, 공통 코드가 있다. 공통 코드는 아래 예시처럼 어디서든 공통으로 사용되는 코드를 말한다.
      예) getConnection() ... => 공통 코드
    | 클래스마다 공통으로 사용되는 메소드를 모았다가 필요한 시기에 자동 호출이 가능
    | 트렌젝션, LOG, 보안

    MVC : 웹 제작(View/Model)
      - Model : 데이터 관리(자바)
      - View : 데이터 출력 전용
      - Controller : 요청을 받고, 데이터를 전송하는 역할
        DispatcherServlet → Tomcat에 의해 구동
                            ------  web.xml에 등록해야해!
        1) DispatcherServlet 등록
        1) DispatcherServlet을 찾는 방법
            <url-pattern> *.do </rul-pattern>
            <url-pattern> / </rul-pattern>
            → PathValiable (admin/hong/1234)
    → 요청을 받는 경우(요청 데이터 전송)
      * request 안에 담겨서 들어온다 => request.getParameter();
        - request는 사용자 정보(IP,PORT) 가지고 있다(보안상 문제)
        - 가급적이면 사용하지 않는다
        - 사용자 정의 메소드를 만들때 매개변수를 설정하면 DispatcherServlet에 의해 매개변수가 채워진다
        - JSP 결과값을 전송 => Model
  Model 작성
  1) @Controller 설정해야 메모리 할당이 가능하다(메소드 찾는 경우)
  2) 메소드
    - 리턴형 : String , void
        String : 화면이동에 관련된 JSP 정보 / 리다이렉트 정보
    - 매개변수 : JSP에서 제공하는 내장객체 설정
        HttpServletRequest, HttpServletResponse, HttpSession
        VO 객체, String[], 기본형 (int, double, boolean...), List<>
        @GetMapping()
        public String display (HttpSession session) - - -  DispatcherServlet의 매개변수로 값을 받는다
  3) 찾기
    @GetMapping : Get방식으로 요청(default) / <a> , ajax , axios....
    @PostMapping : <form> , ajax, axios(axios.get(), axios.post()) ...
    @RequestMapping : Get,Post를 동시에 처리가 가능
  4) return : 반드시 JSP 명만 (확장자는 사용하지 않는다) / 재호출 → "redirect:.do"

  MVC구동방식
  1) 사용자 요청 => .do
  2) DispatcherServlet이 요청을 받는다
  3) DispatcherServlet → HandlerMapping
                      클래스 찾아서 메소드 호출하라고 전송
  4) Model에서 추리 → 사용자 정의(개발자가 제작)
  5) Model에서 처리된 결과를 DispatcherServlet이 받는다
  6) ViewResolver로 전송
      JSP를 찾아서 request를 전송하는 역할
  7) JSP에서 request에 담긴 데이터를 출력
  8) DispatcherServlet에 의해 브라우저 화면 전송
=> 인터셉터, AOP, 트렌젝션 기능
=> 보안, 데이터, 배치, 클라우드 ...

** <p: ~ > :  setter에 값을 채운다

📌 Mapper에서는 반드시 매개변수 1개만 설정할 수 있다
- 데이터를 많이 첨부할 때에는 VO, Map
- 데이터가 VO에 있는거면 VO
- VO 에 없는 변수면 Map
- 동적쿼리를 이용할 떄에는 Map
