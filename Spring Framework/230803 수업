Spring
  → xml (설정파일) = 4버전 이하 (유지보수) : setting
  → 자바 = 5버전 (6버전 자바로 설정)
  -------------------------------------------
  객체 생성 ~ 소멸 (객체의 생명주기 관리) → 클래스(Component) 관리 → Container!
  DI (의존성 주입) : 스프링에서 동작을 위해 필요한 데이터를 전송
                  클래스와 클래스간의 연관관계를 설정(IoC)
    = setter DI → setXxx()
    = constrctor DI → 생성자의 매개변수에 값을 설정
    = method DI → 객체 생성시(init-method), 객체 소멸시(destoy-method)
    = 나머지 메소드는 프로그램에 맞게 개발자 호출

  AOP (공통모듈) : 프로그램에서 반복적으로 수행
    = 자동호출! 자동호출을 위해 지정을 해줘야함!!
    ✓ PointCut : 어떤 메소드를 지정할 것인지?
    ✓ JoinPoint : 어느 위치에 지정할 것인지?
    ------------ pointCut+joinPoint => Advice → Advice 여러개 => Aspect
    ✓ weaving : 기존의 소스에 지정된 위치의 메소드를 묶어주는 역할
    ✓ 트렌젝션
    ✓ 보안
    ✓ 로그파일
    
    @Before
    public void aaa(){}
    @After
    public void bbb(){}
    @AfterThrwoing
    public void ccc(){}
    @AfterReturning
    public void ddd(){}
    @Arouc
    public void eee(){}
    ------------------------------------------------
    public String display(){
      @Before → aaa();
      try {
        ----------- @Around → eee();
          소스코등      setAutoCommit(false)
        ----------- @Around → eee();
      } catch(){
        @AfterThrowing → ccc();
      } finally {

      } 
      return ""; @AfterReturning → dddd();
    }

  MVC : 웹 라이브러리

    - DispatcherServlet : Front Controller : 요청을 받아서 응답
      → 설정(동작을 위한 설정)
      → web.xml에 등록(서블릿은 개발자가 호출하는 것이 아니라 톰캣에 의해 호출)
      → 사용자 정의 클래스를 등록한 파일 요청 application-*.xml
      
    - Model(Controller) : 요청에 대한 처리 (후 결과값을 모아서 DispatcherServlet으로 전송)
      → 모델찾기 : HandlerMapping
    - View : request,session 전송을 받아서 화면 출력
      → viewResolver : MVC 동작을 위한 기본 틀이 만들어져 있다
        - 클래스 등록(xml, java)
        - 메소드 : @RequestMapping,@GetMapping...
  
  📍 클래스 등록할 때 모든 클래스가 등록되는 것이 아니다 -> interface, VO 제외
  - xml
    <bean class="" id="">
    <context:component-scan base-package="">
  - Annotation
    기능별 구분
    @Component : 일반 클래스(MainClass, 크롤링, OpenAPI)
    @Repository : DAO (저장소)
    @Service : DAO+DAO , 의존성 낮게...
    @Controller : Model (page 관리)
    @RestController : Model (데이터 관리) -> 화면에 출력할 데이터 전송
                    : 다른언어(JavaScript,Kotlin)
                      \기타 일반 문자열, JSON, XML
    @ControllerAdvice : Controller 클래스의 공통으로 사용되는 예외처리

🥂 동작 순서 → 인터셉트
  사용자                            preHandler (~자동로그인)
  -------   .do                    --------
  requdst ------ DispatcherServlet           ==> Controller(사용자, Model)
  -------                          --------
                        |            pointHandler
  -------               |
  response              |  afterCompletion(JSON)
  -------    -------   View(JSP)

  = layout : tiles
  = security : 암호화 / 복호화 , 권한부여
  = 인터셉트 : 자동 로그인, 페이스북, 네이버 => 로그인 방법
  = 데이터 마이닝 : 추천
  ----------------------------------------------
  = Spring-Boot (3차 => html,JAP,MySQL)
🌈 회사 입사
1) 소스분석 (회사)
  web.xml / server.xml / application.xml
  클래스 (Model → DAO (service) → JSP)

2) 요즘..신입 요구사항
  React / Vue / MAS(Spring Cloud) / CI(Continue Integration → Docker)/CD
